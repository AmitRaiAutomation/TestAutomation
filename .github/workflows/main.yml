# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Appium CI
# on push we will trigger our code
on: [push]


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:      matrix:        node-version: [14.x, 16.x, 18.x, 20.x]
    steps:      - uses: actions/checkout@v3 - name: Use Node.js ${{ matrix.node-version }}        uses: actions/setup-node@v3        with:          node-version: ${{ matrix.node-version }}
      matrix:
        api-level: [25] #Google api level for example [25,23,28] 
        target: [default]
    steps:
    - uses: actions/checkout@v3 #checkout the code 
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Install and Run Appium Server
      run: |
        chmod +x ./scripts/RunAppiumServer.sh # install and run appium server in the background
        ./scripts/RunAppiumServer.sh
    - name: Run Appium Tests
      uses: reactivecircus/android-emulator-runner@v1 # install and create the Emulator
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        profile: Nexus 6
        script: ./gradlew test --info # running our test with info to check the results
